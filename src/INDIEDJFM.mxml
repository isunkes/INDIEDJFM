<?xml version="1.0" encoding="utf-8"?>
<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
								  xmlns:s="library://ns.adobe.com/flex/spark" applicationDPI="240"
								  splashScreenImage="views.SplashScreenView"
								  creationComplete="init()"
								  >
	<fx:Declarations>
		<fx:Component className="AlertMsg" id="noMixAlert">
			<s:SkinnablePopUpContainer x="100" y="300" backgroundAlpha="0.0" width="300">
				<s:BorderContainer width="95%" height="155" dropShadowVisible="false" borderStyle="inset" borderWeight="4"
								   cornerRadius="10">
					<s:backgroundFill>
						<!-- 0 rotation creates left to right gradient -->
						<s:LinearGradient rotation="90">
							<s:GradientEntry color="0x292929"/>
							<s:GradientEntry color="0x292929"/>
							<s:GradientEntry color="0x030303"/>
							<s:GradientEntry color="0x030303"/>
							<s:GradientEntry color="0x030303"/>
							
						</s:LinearGradient>
					</s:backgroundFill>
					<s:layout>
						<s:VerticalLayout paddingTop="18" paddingBottom="8" paddingLeft="8" paddingRight="8" horizontalAlign="center" verticalAlign="middle"/>
					</s:layout>
					
					<s:Label color="white" text="No Mix Playing"/>
					<s:Button label="close" click="close()" fontSize="40" fontWeight="normal"/>
					
				</s:BorderContainer>
			</s:SkinnablePopUpContainer>
		</fx:Component>
		
		<fx:Component className="FaveAddedMsg" id="faveAddedAlert">
			<s:SkinnablePopUpContainer x="100" y="300" backgroundAlpha="0.0" width="300">
				<s:BorderContainer width="95%" height="155" dropShadowVisible="false" borderStyle="inset" borderWeight="4"
								   cornerRadius="10">
					<s:backgroundFill>
						<!-- 0 rotation creates left to right gradient -->
						<s:LinearGradient rotation="90">
							<s:GradientEntry color="0x292929"/>
							<s:GradientEntry color="0x292929"/>
							<s:GradientEntry color="0x030303"/>
							<s:GradientEntry color="0x030303"/>
							<s:GradientEntry color="0x030303"/>
							
						</s:LinearGradient>
					</s:backgroundFill>
					<s:layout>
						<s:VerticalLayout paddingTop="18" paddingBottom="8" paddingLeft="8" paddingRight="8" horizontalAlign="center" verticalAlign="middle"/>
					</s:layout>
					
					<s:Label color="white" text="Mix Added to Faves"/>
					<s:Button label="OK" click="close()" fontSize="40" fontWeight="normal"/>
					
				</s:BorderContainer>
			</s:SkinnablePopUpContainer>
		</fx:Component>
		
		<fx:Component className="FaveRemovedMsg" id="faveRemovedAlert">
			<s:SkinnablePopUpContainer x="100" y="300" backgroundAlpha="0.0" width="300">
				<s:BorderContainer width="95%" height="155" dropShadowVisible="false" borderStyle="inset" borderWeight="4"
								   cornerRadius="10">
					<s:backgroundFill>
						<!-- 0 rotation creates left to right gradient -->
						<s:LinearGradient rotation="90">
							<s:GradientEntry color="0x292929"/>
							<s:GradientEntry color="0x292929"/>
							<s:GradientEntry color="0x030303"/>
							<s:GradientEntry color="0x030303"/>
							<s:GradientEntry color="0x030303"/>
							
						</s:LinearGradient>
					</s:backgroundFill>
					<s:layout>
						<s:VerticalLayout paddingTop="18" paddingBottom="8" paddingLeft="8" paddingRight="8" horizontalAlign="center" verticalAlign="middle"/>
					</s:layout>
					
					<s:Label color="white" text="Mix Deleted From Faves"/>
					<s:Button label="OK" click="close()" fontSize="40" fontWeight="normal"/>
					
				</s:BorderContainer>
			</s:SkinnablePopUpContainer>
		</fx:Component>
		
		
		
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		s|ActionBar
		{
			chromeColor: #3b3b3b;
			
		}
		s|ActionBar #titleDisplay
		{
			color: #FFFFFF;
			fontWeight: normal;
			fontSize: 64;
			skinClass: ClassReference("spark.skins.mobile.ActionBarSkin");
			textShadowAlpha: .05;
			textShadowColor: #BBBBBB;
		}
		s|TabbedViewNavigator #tabBar
		{
			chromeColor: #232323;
			fontWeight: normal;
			
		}
		
		
		@media (os-platform: "IOS")
		{
			s|ActionBar
			{
				defaultButtonAppearance: beveled;
			}
		}
		
		/* StyleableTextField, regular */
		@font-face {
			src: url("assets/BebasNeue.otf");
			fontFamily: "BebasNeue";
			embedAsCFF: false;
		}
		
		/* Label, regular */
		@font-face {
			src: url("assets/fonts/Roboto-Condensed-webfont.ttf");
			fontFamily: "Roboto-CondensedCFF";
			embedAsCFF: true;
		}
		
		/* Label, bold */
		@font-face {
			src: url("assets/fonts/Roboto-BoldCondensed-webfont.ttf");
			fontFamily: "Roboto-CondensedCFF";
			fontWeight: bold;
			embedAsCFF: true;
		}
		
		/* Label, regular */
		@font-face {
			src: url("assets/BebasNeue.otf");
			fontFamily: "BebasNeueCFF";
			embedAsCFF: true;
		}
		
		/* Label, bold */
		@font-face {
			src: url("assets/BebasNeue.otf");
			fontFamily: "BebasNeueCFF";
			fontWeight: bold;
			embedAsCFF: true;
		}
		
		s|Label
		{
			fontFamily: "Roboto-CondensedCFF";
		}
		
		s|ActionBar
		{
			fontFamily: "BebasNeue";
		}
		
		s|Button
		{
			fontFamily: "BebasNeue";
		}
		
		s|Callout{ 
			contentBackgroundAppearance:"none";
		}
		
		
		
	</fx:Style>
	
	
	<fx:Script>
		<![CDATA[
			//adobe native extension
			import com.adobe.ep.notifications.Notification;
			import com.adobe.ep.notifications.NotificationAlertPolicy;
			import com.adobe.ep.notifications.NotificationEvent;
			import com.adobe.ep.notifications.NotificationIconType;
			import com.adobe.ep.notifications.NotificationManager;
			
			import air.net.URLMonitor;
			
			import events.CheckNetworkConnection;
			import events.Close;
			import events.LoadMixPlayer;
			import events.MixPlayerAddFavMix;
			import events.MixPlayerCurrentFile;
			import events.MixPlayerMetaData;
			import events.MixPlayerPause;
			import events.MixPlayerPlaying;
			import events.MixPlayerRemove;
			import events.MixPlayerRemoveFavMix;
			import events.MixPlayerResume;
			import events.MixPlayerSeek;
			import events.MixPlayerTime;
			import events.NetworkStatus;
			import events.NowPlaying;
			
			import flash.events.EventDispatcher;
			import flash.events.NetStatusEvent;
			import flash.events.UncaughtErrorEvent;
			import flash.net.NetConnection;
			import flash.net.NetStream;
			import flash.utils.clearInterval;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			private var notificationManager:NotificationManager;
			private const NOTIFICATION_CODE:String = "INDIEDJ_NOTIFICATION";
			
			
			public var monitor:URLMonitor;
			
			public var isConnected:Boolean = true;
			
			private var connectionURL:String = "rtmp://sgzkg9myf9lou.cloudfront.net/cfx/st/";
			private var nc:NetConnection;
			private var ns:NetStream;
			private var nsClient:Object;
			
			protected var mixObject:Object = new Object();
			
			private var firstNetConnection:Boolean;
			private var intervalNC:Timer;
			
			protected var mixPlayerInterval:Number;
			
			protected var mixPlayerCurrentFile:String;
			protected var mixPlayerPlaying:Boolean;
			
			protected var bufferEmptyFlag:Boolean = false;
			
			protected var sqlConnection:SQLConnection = new SQLConnection();
			
			protected function init():void
			{
				//initialize database
				//initDB();
				
				// Flag that determines whether to call connectStream() or reconnectStream().
				firstNetConnection = new Boolean();
				firstNetConnection = true;
				
				// A Timer to delay the reconnection.  
				//intervalNC = new Timer(2000, 1);
				//intervalNC.addEventListener(TimerEvent.TIMER_COMPLETE, reconnectNetConnection);
				
				mixObject.mixFile = '';
				NativeApplication.nativeApplication.systemIdleMode=SystemIdleMode.KEEP_AWAKE;
				nc = new NetConnection();
				nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				nc.connect(connectionURL);
				
				nc.client = {onBWDone: function():void{ trace("onBWDone") } };
				
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("faves.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS faves (mixID INTEGER)";
				stmt.execute();
				
				// Detecting online/offline network connectivity with a URLMonitor
				monitor = new URLMonitor(new URLRequest("http://www.adobe.com")); // change URL to URL desired
				monitor.addEventListener(StatusEvent.STATUS, onStatusChange);
				monitor.pollInterval = 20000;// Milliseconds
				monitor.start();
				
				
				
				// Request to be notified when the display state changes (minimized, maximized)
				addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onDisplayStateChange);
				
				// Request to be notified when this application is activated (brought forward as the active window)
				// or deactivated
				NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
				NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivate);
				
				// Invoke listener - request to be notified when the AIR app is invoked (started), this could occur from the command line, UI or
				// from opening an associated file
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);
				
				// Get notified whan a global error occurs
				//loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onError);
				
				// Capture exiting event
				NativeApplication.nativeApplication.addEventListener(Event.EXITING,onAppExiting);
				
				mixesViewNavigator.addEventListener("CLOSE_APP",closeAppHandler);
				homeViewNavigator.addEventListener("CLOSE_APP",closeAppHandler);
				djsViewNavigator.addEventListener("CLOSE_APP",closeAppHandler);
				favesViewNavigator.addEventListener("CLOSE_APP",closeAppHandler);
				
				mixesViewNavigator.addEventListener("MIX_EVENT",loadMixHandler);
				mixesViewNavigator.addEventListener("MIX_SEEK",mixSeekHandler);
				mixesViewNavigator.addEventListener("MIX_PAUSE",mixPauseHandler);
				mixesViewNavigator.addEventListener("MIX_RESUME",mixResumeHandler);
				mixesViewNavigator.addEventListener("MIX_REMOVE",mixRemoveHandler);
				mixesViewNavigator.addEventListener("CURRENT_MIX",mixPlayerCurrentFileHandler);
				mixesViewNavigator.addEventListener("NOW_PLAYING",mixPlayerNowPlayingHandler);
				mixesViewNavigator.addEventListener("ADD_FAVE",mixPlayerAddFaveHandler);
				mixesViewNavigator.addEventListener("REMOVE_FAVE",mixPlayerRemoveFaveHandler);
				mixesViewNavigator.addEventListener("CHECK_NETWORK_STATUS",networkStatusHandler);
				
				homeViewNavigator.addEventListener("MIX_EVENT",loadMixHandler);
				homeViewNavigator.addEventListener("MIX_SEEK",mixSeekHandler);
				homeViewNavigator.addEventListener("MIX_PAUSE",mixPauseHandler);
				homeViewNavigator.addEventListener("MIX_RESUME",mixResumeHandler);
				homeViewNavigator.addEventListener("MIX_REMOVE",mixRemoveHandler);
				homeViewNavigator.addEventListener("CURRENT_MIX",mixPlayerCurrentFileHandler);
				homeViewNavigator.addEventListener("NOW_PLAYING",mixPlayerNowPlayingHandler);
				homeViewNavigator.addEventListener("ADD_FAVE",mixPlayerAddFaveHandler);
				homeViewNavigator.addEventListener("REMOVE_FAVE",mixPlayerRemoveFaveHandler);
				homeViewNavigator.addEventListener("CHECK_NETWORK_STATUS",networkStatusHandler);
				
				djsViewNavigator.addEventListener("MIX_EVENT",loadMixHandler);
				djsViewNavigator.addEventListener("MIX_SEEK",mixSeekHandler);
				djsViewNavigator.addEventListener("MIX_PAUSE",mixPauseHandler);
				djsViewNavigator.addEventListener("MIX_RESUME",mixResumeHandler);
				djsViewNavigator.addEventListener("MIX_REMOVE",mixRemoveHandler);
				djsViewNavigator.addEventListener("CURRENT_MIX",mixPlayerCurrentFileHandler);
				djsViewNavigator.addEventListener("NOW_PLAYING",mixPlayerNowPlayingHandler);
				djsViewNavigator.addEventListener("ADD_FAVE",mixPlayerAddFaveHandler);
				djsViewNavigator.addEventListener("REMOVE_FAVE",mixPlayerRemoveFaveHandler);
				djsViewNavigator.addEventListener("CHECK_NETWORK_STATUS",networkStatusHandler);
				
				favesViewNavigator.addEventListener("MIX_EVENT",loadMixHandler);
				favesViewNavigator.addEventListener("MIX_SEEK",mixSeekHandler);
				favesViewNavigator.addEventListener("MIX_PAUSE",mixPauseHandler);
				favesViewNavigator.addEventListener("MIX_RESUME",mixResumeHandler);
				favesViewNavigator.addEventListener("MIX_REMOVE",mixRemoveHandler);
				favesViewNavigator.addEventListener("CURRENT_MIX",mixPlayerCurrentFileHandler);
				favesViewNavigator.addEventListener("NOW_PLAYING",mixPlayerNowPlayingHandler);
				favesViewNavigator.addEventListener("ADD_FAVE",mixPlayerAddFaveHandler);
				favesViewNavigator.addEventListener("REMOVE_FAVE",mixPlayerRemoveFaveHandler);
				favesViewNavigator.addEventListener("CHECK_NETWORK_STATUS",networkStatusHandler);
				
				// Adobe Notification ANE
				try 
				{
					this.notificationManager = new NotificationManager();
				}
				catch (ae:ArgumentError)
				{
					trace("The notification native extension has\n no support for this platform.");
					return;
				}
				this.notificationManager.addEventListener(NotificationEvent.NOTIFICATION_ACTION,onNotificationActionEvent);	
				this.notificationManager.addEventListener(StatusEvent.STATUS,onNotificationStatusEvent);
				
				dispatchNotification();
				
			}
			
			private function onNotificationActionEvent(ne:NotificationEvent):void
			{				
				trace("Notification action received. Type: " + ne.actionData);				
			}
			
			private function onNotificationStatusEvent(ne:NotificationEvent):void
			{
				trace("Notification status event received!");
			}
			
			private function createNewNotification():Notification
			{
				var n:Notification = new Notification();
				
				n.tickerText = 'INDIEDJ.FM';
				n.title = 'INDIEDJ.FM';
				//n.body = 'INDIEDJ.FM';			
				
				// This action label appears in two places on iOS: on the action button of the notification dialog, and on the unlock slider when the device is locked.
				// If unset, the iOS default will be used. 
				n.actionLabel = "Open";
				
				// Allows you to contorl whether an alert is dispathed with each notification, or just the first notification.
				n.alertPolicy = NotificationAlertPolicy.EACH_NOTIFICATION;
				
				// On Android, specifies whether the notification persists when the user taps it in the notification area
				n.cancelOnSelect = false;
				
				// On Android and iOS "...the app will be brought to the foreground if it was in the background or launched if it had been shutdown.
				// On iOS, the way to perform the action of a notification manifests itself as a button 
				// on the notification dialog that appears when a notification is fired and different
				// text on the unlock slider when the device is locked. 
				// On Android, the way to perform an action is not visible, it is performed by selecting 
				// the notification from the notification list (window shade)."
				n.hasAction = true;
				n.actionData = "customAction";
				
				// Allows you to set the Android notification icon
				n.iconType = NotificationIconType.ALERT;
				
				// On both Android and iOS, lets you set a number on the icon or application badge
				n.numberAnnotation = 0;
				
				// On Android, "ongoing" notifications aren't cleared with the clear button
				n.ongoing = true;
				
				// Android and iOS
				n.playSound = false;
				
				// On Android, alerts (sound and vibration) until acknowledged 
				n.repeatAlertUntilAcknowledged = false;
				
				// Only configurable on Android
				n.vibrate = false;
				
				return n;
			}
			
			protected function dispatchNotification():void
			{			
				// Check to see if the notification native extension will work on this platform
				if ( !this.notificationManager || !this.notificationManager.isSupported )					
				{
					trace("Notifications can't be dispatched on this platform.");
					return;
				}				
				
				
				// Create the notificiation				
				var n:Notification = createNewNotification();
				
				// Dispatch the notification
				// Note that the way popups work on iOS dictate that a pop-up window will only appear when the application is in the background. 
				// If the notification is dispatched and the app is running normally, you won't see a pop-up (but you will receive the event).
				this.notificationManager.notifyUser(NOTIFICATION_CODE,n);
				
				trace("Notification dispatched!");
			}
			
			protected function cancelNotification():void
			{
				if ( this.notificationManager )
				{					
					this.notificationManager.cancel(NOTIFICATION_CODE);
					trace("Notification canceled.");
				}				
				else
				{
					trace("No notifications have been dispatched.");					
				}
			}
			// Handles when the HTTP Network status has changed.
			protected function onStatusChange(e:StatusEvent):void
			{
				if (monitor.available) 
				{
					
					trace("Internet is available");
					isConnected = true;
					trace("isConnected=" + nc.connected);
					if(firstNetConnection == false)
					{
						if(nc.connected == false)
						{
							reconnectNetConnection();
						}
					}
					
				    //var nc2:NetConnection = new NetConnection(); ///on NetConnection.Connect.Success: 
					//ns.attach(nc2);
				} else {
					trace("No Internet access currently available");
					isConnected = false;
					tabbedNavigator.selectedNavigator.activeView.navigator.pushView(views.NetworkConnectionView);
				}
			}
			
			// The application display state has changed
			protected function onDisplayStateChange(e:NativeWindowDisplayStateEvent):void
			{
				trace("Display State Changed from " + e.beforeDisplayState + " to " + e.afterDisplayState);
			}
			
			// The application is now in the foreground and active, restore the frameRate to the default
			protected function onActivate(event:Event):void
			{
				trace("Handling application activate event");
				stage.frameRate=24;
				trace("isConnected=" + nc.connected);
				if(nc.connected == false)
				{
					reconnectNetConnection();
				}
			}
			
			// Handle the application being sent to the background, garbage collect and lower frame rate to use less resources
			protected function onDeactivate(event:Event):void 
			{
				trace("Handling application deactivate event");
				
					
				System.gc();
				stage.frameRate=2;
			}
			
			// Called when application is first invoked
			protected function onInvoke(invokeEvt:InvokeEvent):void 
			{
				trace("Handling invoke event");
			}
			
			// Handle Global Errors
			protected function onError(e:UncaughtErrorEvent):void
			{
				e.preventDefault();
				trace("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}
			
			// Called when application exits
			protected function onAppExiting(e:Event):void
			{
				trace("Handling application exit event");
			}
			
			
			protected function mixPlayerAddFaveHandler(event:MixPlayerAddFavMix):void
			{
				trace('add to faves')
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "INSERT into faves(mixid) values(:mixid)";
				stmt.parameters[":mixid"] = event.mixObject.id;
				stmt.execute();
				
				(new FaveAddedMsg()).open(this, false)
				
			}
			
			protected function mixPlayerRemoveFaveHandler(event:MixPlayerRemoveFavMix):void
			{
				trace('add to faves')
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DELETE FROM faves WHERE mixid = :mixid";
				stmt.parameters[":mixid"] = event.mixObject.id;
				stmt.execute();
				
				(new FaveRemovedMsg()).open(this, false)
				
			}
			
			//override public function dispatchEvent(event:Event):Boolean
			//{
			//	trace(event.type);
			//	return super.dispatchEvent(event);
			//}
			
			protected function netStatusHandler(e:NetStatusEvent):void 
			{ 
				
				trace(e.info.code);
				
				
				switch (e.info.code) {
					case "NetStream.Play.Start" :
						trace("IT'S PLAYING YOU SHOULD SEE SOMETHING");
						break;
					case "NetStream.Buffer.Full" :
						trace("THE BUFFER IS FULL.");
						if(tabbedNavigator.selectedNavigator.activeView.name.substr(0,10) == 'PlayerView')
						{
							tabbedNavigator.selectedNavigator.activeView.currentState = 'normal';
							bufferEmptyFlag = false;
						}
						
						break;
					
					case "NetStream.Buffer.Empty" :
						trace("THE BUFFER IS NOW EMPTY.");
						trace("mixPlayerPlaying=" + mixPlayerPlaying );
						trace("bufferEmptyFlag=" + bufferEmptyFlag );
						if(tabbedNavigator.selectedNavigator.activeView.name.substr(0,10) == 'PlayerView')
						{
							tabbedNavigator.selectedNavigator.activeView.currentState = 'buffering';
						}
						if (mixPlayerPlaying == true)
						{
							if (bufferEmptyFlag == false)
							{
								//ns.resume();
								bufferEmptyFlag = true;
							}
								
								
						}
						break;
					
					case "NetConnection.Connect.Success" :
						if (firstNetConnection) { 
							// If this is the first time connecting, create and set up a NetStream.
							connectStream();
						} else { 
							// If this isn't the first time connecting, attach the NetStream 
							// to the reconnected NetConnection. 
							reconnectStream(); 
						} 
						break;	
					case "NetConnection.Connect.Closed":
						// After the connection closes, change the firstNetConnection flag.
						firstNetConnection = false;
						//intervalNC.start();
						//trace("Timer Started");
						break;
					case "NetConnection.Connect.Failed":
						// If the reconnection attempt fails, try again. 
						//intervalNC.start();
						break;
					case "NetConnection.Connect.NetworkChange":
						// If the reconnection attempt fails, try again. 
						trace("NetworkChange");
						firstNetConnection = false;
						if(nc.connected == false)
						{
							reconnectNetConnection();
						}
						break;
				}
				
			}
			
			
			// Called when the first NetConnection is successful.
			private function connectStream():void {
				trace("connectStream() called");
				
				// Create a NetStream and add listeners to handle NetStatusEvents and errors.
				ns = new NetStream(nc);
				ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				
				// Turn on Smark Seeking and set the bufferTime so there's enough time to reconnect
				// and maintain seamless playback.
				ns.inBufferSeek=true;
				ns.bufferTime = 6;
				
				// Create an object to handle the metadata.     
				// Assign the client property to the object handling the metadata.
				nsClient = new Object();
				nsClient.onMetaData = ns_onMetaData;
				ns.client = nsClient;
				
				
			}
			
			// Called after a connection closes to reconnect to FMS.
			private function reconnectNetConnection():void {
				trace("reconnectNetConnection() called");
				nc = new NetConnection();
				nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				nc.connect(connectionURL);
				
				nc.client = {onBWDone: function():void{ trace("onBWDone") } };
				
			}
			
			// Called after a successful reconnection to FMS.
			private function reconnectStream():void {
				trace("reconnectStream() called");
				// Attaches the same NetStream to the reconnected NetConnection.
				// Flash Player knows where to start playing the stream.
				ns.attach(nc); 
				// Add the first playlist entry.
				// Note that to rebuild the playlist, you use APPEND_AND_WAIT.
				
				
				
			}
			
			private function ns_onMetaData(item:Object):void {
				
			}
			
			// Handles error messages.  
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				// Ignore SecurityErrorEvent events.
			}
			
			private function asyncErrorHandler(event:AsyncErrorEvent):void {
				// Ignore AsyncErrorEvent events.
			}
			
			
			
			private function disconnect():void{
				nc.call("disconnectClient", null);
			}
			
			
			
			
			
			
			
			protected function loadMixHandler(event:LoadMixPlayer):void
			{
				trace(event.mixObject.mixFile);
				trace("isConnected=" + nc.connected);
				mixObject = event.mixObject;
				mixPlayerCurrentFile = event.mixObject.mixFile;
				ns.dispose();
				ns.close();
				ns.inBufferSeek=true;
				ns.bufferTime = 6;
				ns.play("mp3:" + event.mixObject.mixFile );
				mixPlayerInterval = setInterval(checkTime, 500);
				mixPlayerPlaying = true;
				bufferEmptyFlag = false;
				
				
				
				
			}
			
			protected function checkTime():void 
			{  
				//trace(ns.time);
				tabbedNavigator.selectedNavigator.activeView.dispatchEvent(new MixPlayerTime(ns.time,MixPlayerTime.LOAD_MIX_TIME));
			}
			
			protected function mixSeekHandler(event:MixPlayerSeek):void
			{
				ns.seek(event.mixSeekTime);
			}
			
			protected function mixPauseHandler(event:MixPlayerPause):void
			{
				ns.pause();
				clearInterval(mixPlayerInterval);
				mixPlayerPlaying = false;
				bufferEmptyFlag = false;
			}
			
			protected function mixResumeHandler(event:MixPlayerResume):void
			{
				ns.resume();
				mixPlayerInterval = setInterval(checkTime, 500);
				mixPlayerPlaying = true;
				bufferEmptyFlag = false;
			}
			
			protected function mixRemoveHandler(event:MixPlayerRemove):void
			{
				clearInterval(mixPlayerInterval);
			}
			
			protected function mixPlayerCurrentFileHandler(event:MixPlayerCurrentFile):void
			{
				if(mixPlayerCurrentFile == event.mixObject.mixFile)
				{
					trace(event.mixObject.mixFile);
					mixPlayerInterval = setInterval(checkTime, 500);
					tabbedNavigator.selectedNavigator.activeView.dispatchEvent(new MixPlayerPlaying(mixObject,MixPlayerPlaying.CURRENT_MIX_PLAYING));
				}
			}
			
			protected function closeAppHandler(event:Close):void
			{
				cancelNotification();
				NativeApplication.nativeApplication.exit();
			}
			
			
			protected function mixPlayerNowPlayingHandler(event:NowPlaying):void
			{
				if (mixObject.mixFile == '')
				{
					(new AlertMsg()).open(this, false)
				}
				else
				{
					tabbedNavigator.selectedNavigator.activeView.navigator.pushView(views.PlayerView, mixObject);
				}
				
				
			}
			
			protected function networkStatusHandler(event:CheckNetworkConnection):void
			{
				if (isConnected == false)
				{
					tabbedNavigator.selectedNavigator.activeView.navigator.pushView(views.NetworkConnectionView);
				}
				
			}
			
			
		]]>
	</fx:Script>
	
	
	
	<s:ViewNavigator id="homeViewNavigator"  width="100%" height="100%" firstView="views.HomeView">
		<s:icon>
			<s:MultiDPIBitmapSource source160dpi="assets/53-house@2x.png"
									source240dpi="assets/53-house@2x.png"
									source320dpi="assets/53-house@2x.png"/>
		</s:icon>
	</s:ViewNavigator>
	
	<s:ViewNavigator id="mixesViewNavigator" width="100%" height="100%" firstView="views.MixesView">
		<s:icon>
			<s:MultiDPIBitmapSource source160dpi="assets/120-headphones@2x.png"
									source240dpi="assets/120-headphones@2x.png"
									source320dpi="assets/120-headphones@2x.png"/>
		</s:icon>
	</s:ViewNavigator>
	
	<s:ViewNavigator id="djsViewNavigator"  width="100%" height="100%" firstView="views.DjsView" >
		<s:icon>
			<s:MultiDPIBitmapSource source160dpi="assets/112-group@2x.png"
									source240dpi="assets/112-group@2x.png"
									source320dpi="assets/112-group@2x.png"/>
		</s:icon>
	</s:ViewNavigator>
	
	<s:ViewNavigator id="favesViewNavigator"  width="100%" height="100%" firstView="views.FavoritesView">
		<s:icon>
			<s:MultiDPIBitmapSource source160dpi="assets/29-heart@2x.png"
									source240dpi="assets/29-heart@2x.png"
									source320dpi="assets/29-heart@2x.png"/>
		</s:icon>
	</s:ViewNavigator>
	
	
	
</s:TabbedViewNavigatorApplication>

